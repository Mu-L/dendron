import { getSidebar, DefaultSidebar } from "@dendronhq/common-all";
import { runEngineTestV5 } from "../../engine";
import { ENGINE_HOOKS } from "../../presets";

describe("GIVEN sidebar config input", () => {
  describe("WHEN providing empty config", () => {
    test("THEN return empty sidebar object", async () => {
      await runEngineTestV5(
        async ({ engine }) => {
          const sidebarResp = getSidebar([], { notes: engine.notes });
          expect(sidebarResp.data).toHaveLength(0);
        },
        {
          expect,
          preSetupHook: ENGINE_HOOKS.setupBasic,
        }
      );
    });
  });

  describe("WHEN providing DefaultSidebar", () => {
    test("THEN return sidebar object", async () => {
      await runEngineTestV5(
        async ({ engine }) => {
          const sidebarResp = getSidebar(DefaultSidebar, {
            notes: engine.notes,
          });
          expect(sidebarResp.data).toMatchSnapshot();
          expect(sidebarResp.data).toHaveLength(2);
          expect(sidebarResp.data).toHaveProperty("[1].items[0].id", "foo.ch1");
        },
        {
          expect,
          preSetupHook: ENGINE_HOOKS.setupBasic,
        }
      );
    });
  });

  describe("WHEN providing custom sidebar", () => {
    test("THEN return sidebar object", async () => {
      await runEngineTestV5(
        async ({ engine }) => {
          const sidebarResp = getSidebar(
            [
              {
                type: "note",
                label: "Foo label",
                id: "foo",
              },
              {
                type: "category",
                label: "Some category label",
                link: { type: "note", id: "bar" },
                items: [
                  {
                    type: "autogenerated",
                    id: "foo.ch1",
                  },
                  {
                    type: "note",
                    label: "Some deep note",
                    id: "goo.ends-with-ch1.no-ch1-by-itself",
                  },
                ],
              },
            ],
            { notes: engine.notes }
          );
          expect(sidebarResp.data).toMatchSnapshot();
          expect(sidebarResp.data).toHaveProperty(
            "[1].items[0].items[0].id",
            "foo.ch1.gch1.ggch1"
          );
          expect(sidebarResp.data).toHaveProperty(
            "[1].items[2].id",
            "goo.ends-with-ch1.no-ch1-by-itself"
          );
        },
        {
          expect,
          preSetupHook: ENGINE_HOOKS.setupHierarchyForLookupTests,
        }
      );
    });
  });
});
