import _ from "lodash";
import * as v from "@badrap/valita";
import type {
  NotePropsByIdDict,
  DuplicateNoteBehavior,
  DNodePointer,
  RespV3,
} from "./types";
import type { Option } from "./utils";
import { PublishUtils } from "./utils";
import { parse } from "./parse";
import {
  DendronError,
  assertUnreachable,
  ErrorFuncUtils as ErrorRespV3Utils,
} from "./error";
import { ERROR_STATUS } from "./constants";

const noteLiteral = v.literal("note");
const autogeneratedLiteral = v.literal("autogenerated");
const categoryLiteral = v.literal("category");

const idSchema = v.string();

const sidebarItemNote = v.object({
  type: noteLiteral,
  id: idSchema,
  label: v.string(),
});

const sidebarItemAutogenerated = v.object({
  type: autogeneratedLiteral,
  id: idSchema,
});

const sidebarItemCategoryLinkNote = v.object({
  type: noteLiteral,
  id: idSchema,
});

const sidebarItemCategoryLink = v.union(sidebarItemCategoryLinkNote);

type SidebarItemCategoryConfig = {
  type: "category";
  label: string;
  items: SidebarItemConfig[];
  link: SidebarItemCategoryLink;
};
const sidebarItemCategoryConfig: v.Type<SidebarItemCategoryConfig> = v.lazy(
  () =>
    v
      .object({
        type: categoryLiteral,
        label: v.string(),
        items: v.array(v.lazy(() => sidebarItemConfig)),
        link: sidebarItemCategoryLink,
      })
      .chain((item) => {
        // error when this item is invalid and therefore won't show up in the sidebar
        if (item.items.length === 0 && !item.link) {
          return v.err(
            `Sidebar category '${item.label}' has neither any subitem nor a link. This makes this item not able to link to anything.`
          );
        }
        return v.ok(item);
      })
);

const sidebarItemCategory: v.Type<SidebarItemCategory> = v.lazy(() =>
  v.object({
    type: categoryLiteral,
    label: v.string(),
    items: v.array(v.lazy(() => sidebarItem)),
    link: sidebarItemCategoryLink,
  })
);

const sidebarItemConfig = v.union(
  sidebarItemCategoryConfig,
  sidebarItemNote,
  sidebarItemAutogenerated
);
const sidebarConfig = v.array(sidebarItemConfig);

const sidebarItem = v.union(sidebarItemCategory, sidebarItemNote);

type SidebarItemConfig = v.Infer<typeof sidebarItemConfig>;
type SidebarConfig = v.Infer<typeof sidebarConfig>;

type SidebarItemNote = v.Infer<typeof sidebarItemNote>;
type SidebarItemAutogenerated = v.Infer<typeof sidebarItemAutogenerated>;
type SidebarItemCategoryLink = v.Infer<typeof sidebarItemCategoryLink>;
type SidebarItemCategory = {
  type: "category";
  label: string;
  items: SidebarItem[];
  link: SidebarItemCategoryLink;
};
export type SidebarItem = v.Infer<typeof sidebarItem>;
export type Sidebar = Array<SidebarItem>;

type SidebarItemsGeneratorParams = {
  item: SidebarItemAutogenerated;
  notes: NotePropsByIdDict;
};
type SidebarItemsGenerator = (
  params: SidebarItemsGeneratorParams
) => SidebarItem[];

type SidebarOptions = {
  duplicateNoteBehavior?: DuplicateNoteBehavior;
  notes: NotePropsByIdDict;
};

type WithPosition<T> = T & {
  position?: number;
  fname?: string;
  reverse?: boolean;
};

const ROOT_KEYWORD = "root";

export const DefaultSidebar: SidebarConfig = [
  {
    type: "autogenerated",
    id: ROOT_KEYWORD,
  },
];

export const DisabledSidebar: SidebarConfig = [];

const defaultSidebarItemsGenerator: SidebarItemsGenerator = ({
  item,
  notes: notesById,
}) => {
  function findHierarchySources() {
    const isTopLevel = item.id === ROOT_KEYWORD;

    // 1. if item-pointer to root find all root notes
    if (isTopLevel) {
      return Object.values(notesById)
        .filter((note) => {
          const { fname } = note;
          if (fname === "root") {
            return false;
          }
          const hierarchyPath = fname.split(".");
          if (hierarchyPath.length === 1) {
            return true;
          }
          return false;
        })
        .map(({ id }) => id);
    }

    const note = notesById[item.id];

    if (!note) {
      throw DendronError.createFromStatus({
        message: `SidebarItem \`${item.id}\` does not exist`,
        status: ERROR_STATUS.DOES_NOT_EXIST,
      });
    }

    return note.children;
  }

  function generateSidebar(
    noteIds: DNodePointer[]
  ): WithPosition<SidebarItem>[] {
    return noteIds
      .map((noteId) => {
        const note = notesById[noteId];
        const fm = PublishUtils.getPublishFM(note);
        const { children } = note;
        const hasChildren = children.length > 0;
        const isCategory = hasChildren;
        const isNote = !hasChildren;

        if (!note) {
          return undefined;
        }

        const positionalProps = {
          position: fm.nav_order,
          fname: note.fname,
          reverse: fm.sort_order === "reverse",
        };

        if (isNote) {
          return {
            type: "note",
            id: note.id,
            label: note.title,
            ...positionalProps,
          } as SidebarItemNote;
        }

        if (isCategory) {
          return {
            type: "category",
            label: note.title,
            items: generateSidebar(children),
            link: { type: "note", id: note.id },
            ...positionalProps,
          } as SidebarItemCategory;
        }

        return undefined;
      })
      .filter((maybeSidebarItem): maybeSidebarItem is SidebarItem =>
        Boolean(maybeSidebarItem)
      );
  }

  function sortItems(sidebarItems: WithPosition<SidebarItem>[]): Sidebar {
    const processedSidebarItems = sidebarItems.map((item) => {
      if (item.type === "category") {
        const sortedItems = sortItems(item.items);
        if (item.reverse) {
          sortedItems.reverse();
        }
        return { ...item, items: sortedItems };
      }
      return item;
    });
    const sortedSidebarItems = _.sortBy(processedSidebarItems, [
      "position",
      "fname",
    ]);
    return sortedSidebarItems.map(
      ({ position, fname, reverse, ...item }) => item
    );
  }

  const hierarchySource = findHierarchySources();

  return _.flow(generateSidebar, sortItems)(hierarchySource);
};

function processSidebar(
  sidebarResp: RespV3<SidebarConfig>,
  { notes, duplicateNoteBehavior }: SidebarOptions
): RespV3<Sidebar> {
  function processAutoGeneratedItem(item: SidebarItemAutogenerated) {
    return (
      // optional future feature to control sidebarItems generation
      defaultSidebarItemsGenerator({ item, notes })
    );
  }

  function resolveItem(item: SidebarItemConfig): SidebarItemConfig {
    function resolveItemId(sidebarId: string) {
      const realizableNotes = [
        // 1. check if associated using note id.
        notes[sidebarId] ??
          // 2. find note based on `fname`
          Object.values(notes).filter((note) => {
            return note.fname === sidebarId;
          }),
      ].flat();

      const getPrioritizedRealizableNotes = () => {
        const map = new Map(
          realizableNotes.map((note) => [
            note.vault.name ?? note.vault.fsPath,
            note,
          ])
        );
        return getPriorityVaults(duplicateNoteBehavior)
          ?.filter((vaultName) => map.has(vaultName))
          .map((vaultName) => map.get(vaultName));
      };

      const hasDuplicates = realizableNotes.length > 1;
      const note = _.first(
        (hasDuplicates && getPrioritizedRealizableNotes()) || realizableNotes
      );

      if (!note) {
        throw DendronError.createFromStatus({
          message: `SidebarItem \`${sidebarId}\` does not exist`,
          status: ERROR_STATUS.DOES_NOT_EXIST,
        });
      }
      return note.id;
    }

    const { type } = item;
    switch (type) {
      case "category": {
        const { link } = item;
        return {
          ...item,
          link: { type: "note", id: resolveItemId(link.id) },
        };
      }
      case "autogenerated": {
        return {
          ...item,
          id: item.id === ROOT_KEYWORD ? item.id : resolveItemId(item.id),
        };
      }
      case "note": {
        return {
          ...item,
          id: resolveItemId(item.id),
        };
      }
      default:
        assertUnreachable(type);
    }
  }

  function processItem(_item: SidebarItemConfig): SidebarItem[] {
    const item = resolveItem(_item);
    const { type } = item;
    switch (type) {
      case "category": {
        return [
          {
            ...item,
            items: item.items.map(processItem).flat(),
          },
        ];
      }
      case "autogenerated":
        return processAutoGeneratedItem(item);
      case "note": {
        return [item];
      }
      default:
        assertUnreachable(type);
    }
  }

  const encasedProcessItem = ErrorRespV3Utils.encase(processItem);

  const sidebarProcessedResp = ErrorRespV3Utils.map(sidebarResp, (sidebar) => {
    const sidebarProcessedRespList = sidebar.map(encasedProcessItem);
    const sidebarProcessedResp = ErrorRespV3Utils.combine(
      sidebarProcessedRespList
    );
    const sidebarProcssedFlattenedResp = ErrorRespV3Utils.map(
      sidebarProcessedResp,
      (x) => x.flat()
    );
    return sidebarProcssedFlattenedResp;
  });
  return ErrorRespV3Utils.unwrap(sidebarProcessedResp);
}

/**

The sidebar gets generated through the following steps:

1. **Parsing**. using [zod](https://github.com/colinhacks/zod) we parse the content of the sidebar config file. Returns `SidbarConfig`.
  - this is inspired by [Parse, donâ€™t validate](https://lexi-lambda.github.io/blog/2019/11/05/parse-don-t-validate/)
  - If we support shorthand (for now we skip it) parsing would also have a transformation step from shorthand to longhand.
  - here we should also check if the hierarchies that the sidebar config points to are actually going to be published. If not an `RespV3ErrorResp` should returned.
2. **Generate**. Generate domains
  - consists of:
    - processing
      - resolve autogenerates
*/
export function getSidebar(
  input: unknown,
  options: SidebarOptions
): RespV3<Sidebar> {
  return processSidebar(parse(sidebarConfig, input), options);
}

/**
 * Returns list of vault names sorted by `duplicateNoteBehavior`
 */
function getPriorityVaults(
  duplicateNoteBehavior?: DuplicateNoteBehavior
): Option<string[]> {
  if (Array.isArray(duplicateNoteBehavior?.payload)) {
    return [...new Set(duplicateNoteBehavior?.payload)];
  }
  const vaultName = duplicateNoteBehavior?.payload.vault?.name;
  if (vaultName) {
    return [vaultName];
  }
  return undefined;
}
